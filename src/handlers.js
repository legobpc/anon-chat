/**
 * Registers Telegram bot commands (/start, /stop, /next, /about)
 * @param {TelegramBot} bot - The Telegram bot instance
 * @param {object} logic - Chat logic module
 */
function setupCommands(bot, logic) {
    bot.onText(/\/start/, (msg) => {
        const userId = msg.chat.id;

        // If already in chat, notify and exit
        if (logic.isInChat(userId)) {
            bot.sendMessage(userId, '‚ö†Ô∏è –í–∏ –≤–∂–µ –≤ —á–∞—Ç—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–í–∏–π—Ç–∏", —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω—É —Ä–æ–∑–º–æ–≤—É.');
            return;
        }

        // If user hasn't accepted terms ‚Äî send them first
        if (!logic.hasAcceptedTerms(userId)) {
            bot.sendMessage(userId, `‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ü—å–æ–≥–æ –±–æ—Ç–∞, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏:\n
    ‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –æ–±—Ä–∞–∂–∞—Ç–∏ —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤
    ‚Ä¢ –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∏–π –∞–±–æ –Ω–µ–ø—Ä–∏–π–Ω—è—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    ‚Ä¢ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ –Ω–µ—Å–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω—ñ—Å—Ç—å –∑–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    ‚Ä¢ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –±–æ—Ç –¥–æ–±—Ä–æ–≤—ñ–ª—å–Ω–æ —Ç–∞ –∞–Ω–æ–Ω—ñ–º–Ω–æ
    
    ‚ñ∂Ô∏è –ù–∞—Ç–∏—Å–Ω—É–≤—à–∏ ¬´–ü–æ—á–∞—Ç–∏¬ª, –≤–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å –∑ —Ü–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.`);
        }

        // Show main menu and connect to partner
        logic.showMainMenu(bot, userId);
        logic.disconnect(bot, userId, false);
    });

    bot.onText(/\/stop/, (msg) => {
        const userId = msg.chat.id;
        logic.disconnect(bot, userId);
        bot.sendMessage(userId, '‚úÖ –í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç. –ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞.');
        logic.showMainMenu(bot, userId);
    });

    bot.onText(/\/next/, (msg) => {
        const userId = msg.chat.id;
        logic.disconnect(bot, userId);
        logic.findPartner(bot, userId);
    });

    bot.onText(/\/about (.+)/, (msg, match) => {
        const userId = msg.chat.id;
        const aboutText = match[1].trim();

        if (aboutText.length > 250) {
            bot.sendMessage(userId, '‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–æ—Ç–∫—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é (–¥–æ 250 —Å–∏–º–≤–æ–ª—ñ–≤).');
            return;
        }

        logic.setProfile(userId, aboutText);
        bot.sendMessage(userId, '‚úÖ –í–∞—à –æ–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ô–æ–≥–æ –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫—É –ø—Ä–∏ –∑ º—î–¥–Ω–∞–Ω–Ω—ñ.');
    });
}

/**
 * Handles inline button interactions (callback queries)
 * @param {TelegramBot} bot - The Telegram bot instance
 * @param {object} logic - Chat logic module
 */
function setupCallbacks(bot, logic) {
    bot.on('callback_query', (query) => {
        const userId = query.from.id;

        if (query.data === 'stop') {
            logic.disconnect(bot, userId);
            bot.sendMessage(userId, '‚úÖ –í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç.');
            logic.showMainMenu(bot, userId);
        }

        if (query.data === 'next') {
            logic.disconnect(bot, userId);
            logic.findPartner(bot, userId);
        }

        bot.answerCallbackQuery(query.id);
    });
}

/**
 * Handles all user messages, including forwarded messages and button text
 * @param {TelegramBot} bot - The Telegram bot instance
 * @param {object} logic - Chat logic module
 */
function setupMessages(bot, logic) {
    bot.on('message', (msg) => {
        const userId = msg.chat.id;

        // Custom keyboard actions
        if (msg.text === '‚ñ∂Ô∏è –ü–æ—á–∞—Ç–∏') {
            if (!logic.hasAcceptedTerms(userId)) {
                logic.acceptTerms(userId);
            }

            logic.disconnect(bot, userId, false);
            logic.findPartner(bot, userId);
            return;
        }

        if (msg.text === '‚èπ –ó—É–ø–∏–Ω–∏—Ç–∏') {
            logic.disconnect(bot, userId);
            bot.sendMessage(userId, '‚úÖ –í–∏ –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç.');
            logic.showMainMenu(bot, userId);
            return;
        }

        if (msg.text === 'üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å') {
            const profile = logic.getProfile(userId);
            if (profile) {
                bot.sendMessage(userId, `üë§ –í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n${profile}`);
            } else {
                bot.sendMessage(userId, '‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –ø—Ä–æ—Ñ—ñ–ª—é. –ù–∞–ø–∏—à—ñ—Ç—å –π–æ–≥–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏:\n/about –Ø –ª—é–±–ª—é –∫—ñ–Ω–æ');
            }
            return;
        }

        // Forward message to partner if in chat
        const partnerId = logic.getPartner(userId);
        if (!partnerId || msg.text?.startsWith('/')) return;

        if (msg.text) {
            bot.sendMessage(partnerId, msg.text);
        } else if (msg.photo) {
            const photo = msg.photo[msg.photo.length - 1].file_id;
            bot.sendPhoto(partnerId, photo, { caption: msg.caption || '' });
        } else if (msg.sticker) {
            bot.sendSticker(partnerId, msg.sticker.file_id);
        } else if (msg.voice) {
            bot.sendVoice(partnerId, msg.voice.file_id);
        }
    });
}

module.exports = {
    setupCommands,
    setupCallbacks,
    setupMessages
};